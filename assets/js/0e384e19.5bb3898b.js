"use strict";(self.webpackChunkswartzdb_docs=self.webpackChunkswartzdb_docs||[]).push([[976],{7879:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"intro","title":"SwartzDB","description":"Lightweight JSON-Based Database for Web Apps","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/docs/intro","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Getting Started","permalink":"/docs/category/getting-started"}}');var a=i(4848),s=i(8453);const r={sidebar_position:1},o="SwartzDB",d={},l=[{value:"Lightweight JSON-Based Database for Web Apps",id:"lightweight-json-based-database-for-web-apps",level:2},{value:"Important Notice",id:"important-notice",level:2},{value:"Features",id:"features",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Initializing the Database",id:"initializing-the-database",level:3},{value:"Adding a Row",id:"adding-a-row",level:3},{value:"Fetching Data",id:"fetching-data",level:3},{value:"Updating a Row",id:"updating-a-row",level:3},{value:"Deleting a Row",id:"deleting-a-row",level:3},{value:"Limitations",id:"limitations",level:2},{value:"\ud83c\udf97 Tribute",id:"-tribute",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"swartzdb",children:"SwartzDB"})}),"\n",(0,a.jsx)(n.h2,{id:"lightweight-json-based-database-for-web-apps",children:"Lightweight JSON-Based Database for Web Apps"}),"\n",(0,a.jsx)(n.p,{children:"This project provides a simple, file-based JSON database for small-scale web applications. It includes built-in encryption and various functions for database control, data access, and manipulation."}),"\n",(0,a.jsx)(n.h2,{id:"important-notice",children:"Important Notice"}),"\n",(0,a.jsxs)(n.p,{children:["Before using this database, ",(0,a.jsxs)(n.strong,{children:["change the default encryption key (",(0,a.jsx)(n.code,{children:"key"}),"), Extra encryption key (",(0,a.jsx)(n.code,{children:"Ekey"}),") and initialization vector (",(0,a.jsx)(n.code,{children:"IV"}),")"]})," in ",(0,a.jsx)(n.code,{children:"config.php"})," to ensure security."]}),"\n",(0,a.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Database Control Functions"}),": Create, Delete, Backup, Restore, Integrity check"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Data Access Functions"}),": Get, Put, Get_row, Add_row, Update_row, Remove_row"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Data Manipulation Functions"}),": Filter, Aggregate"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Utility Functions"}),": Getkeys, IDGEN, Encryption helpers"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.h3,{id:"initializing-the-database",children:"Initializing the Database"}),"\n",(0,a.jsxs)(n.p,{children:["Include ",(0,a.jsx)(n.code,{children:"connect.php"})," in your project:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-PHP",children:"require_once 'connect.php';\n$sdb = new SwartzDB('<database_path>');\n$sdb->create('users');\n\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Default database_path, if left empty is a folder called ",(0,a.jsx)(n.code,{children:"storage"})," in the SwartzDB folder."]}),"\n",(0,a.jsx)(n.h3,{id:"adding-a-row",children:"Adding a Row"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-PHP",children:"$data = ['id' => 1, 'name' => 'John Doe', 'email' => 'john@example.com'];\n$sdb->add_row('users', $data);\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"fetching-data",children:"Fetching Data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"$user = $sdb->get_row('users', ['id' => 1, 'name' => 'John Doe']);\nprint_r($user);\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"updating-a-row",children:"Updating a Row"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"$update = ['email' => 'newemail@example.com'];\n$sdb->update_row('users', ['id' => 1, 'name' => 'John Doe'], $update);\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"deleting-a-row",children:"Deleting a Row"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"$sdb->remove_row('users', ['id' => 1, 'name' => 'John Doe']);\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,a.jsxs)(n.p,{children:["This is a ",(0,a.jsx)(n.strong,{children:"fun and learning project"}),", not meant for production or large-scale systems. ",(0,a.jsx)(n.strong,{children:"SwartzBD"})," is designed for ",(0,a.jsx)(n.strong,{children:"small-scale PHP websites"})," that need simple data storage and retrieval. If you require ",(0,a.jsx)(n.strong,{children:"high-performance, concurrent, or large-scale"})," database operations, consider using ",(0,a.jsx)(n.strong,{children:"SQL-based databases"})," or more robust ",(0,a.jsx)(n.strong,{children:"NoSQL solutions"})," like MongoDB."]}),"\n",(0,a.jsx)(n.h2,{id:"-tribute",children:"\ud83c\udf97 Tribute"}),"\n",(0,a.jsxs)(n.p,{children:["This project is dedicated to ",(0,a.jsx)(n.strong,{children:"Aaron Swartz"}),", a visionary in open access and digital freedom."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(6540);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);