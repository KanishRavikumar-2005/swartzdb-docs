"use strict";(self.webpackChunkswartzdb_docs=self.webpackChunkswartzdb_docs||[]).push([[843],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}},9208:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"data-manipulation/aggregate","title":"Aggregate Function","description":"The aggregate function in SwartzDB is used to perform calculations on a list of numeric values. It works seamlessly with the filter function when extracting numeric data.","source":"@site/docs/data-manipulation/aggregate.md","sourceDirName":"data-manipulation","slug":"/data-manipulation/aggregate","permalink":"/docs/data-manipulation/aggregate","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Filter Function","permalink":"/docs/data-manipulation/filter"},"next":{"title":"Utility Functions","permalink":"/docs/category/utility-functions"}}');var t=s(4848),i=s(8453);const l={sidebar_position:2},a="Aggregate Function",c={},d=[{value:"<strong>How <code>aggregate</code> Works</strong>",id:"how-aggregate-works",level:2},{value:"<strong>Using <code>aggregate</code> with <code>filter</code></strong>",id:"using-aggregate-with-filter",level:2},{value:"<strong>Example: Sum of All Prices</strong>",id:"example-sum-of-all-prices",level:3},{value:"<strong>Example: Finding the Highest Score</strong>",id:"example-finding-the-highest-score",level:3},{value:"<strong>Example: Calculating the Average Age</strong>",id:"example-calculating-the-average-age",level:3},{value:"<strong>Why Use <code>aggregate</code> with <code>filter</code>?</strong>",id:"why-use-aggregate-with-filter",level:2},{value:"<strong>Conclusion</strong>",id:"conclusion",level:2}];function o(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"aggregate-function",children:"Aggregate Function"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"aggregate"})," function in SwartzDB is used to perform calculations on a list of numeric values. It works seamlessly with the ",(0,t.jsx)(n.code,{children:"filter"})," function when extracting numeric data."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"how-aggregate-works",children:(0,t.jsxs)(n.strong,{children:["How ",(0,t.jsx)(n.code,{children:"aggregate"})," Works"]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"aggregate"})," function supports several operations:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Operation"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Description"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"SUM"})}),(0,t.jsx)(n.td,{children:"Adds up all values."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"MIN"})}),(0,t.jsx)(n.td,{children:"Finds the smallest value."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"MAX"})}),(0,t.jsx)(n.td,{children:"Finds the largest value."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"AVG"})}),(0,t.jsx)(n.td,{children:"Computes the average."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"COUNT"})}),(0,t.jsx)(n.td,{children:"Counts the number of elements."})]})]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$result = $sdb->aggregate([10, 20, 30], 'SUM');  \r\n// Output: 60\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"using-aggregate-with-filter",children:(0,t.jsxs)(n.strong,{children:["Using ",(0,t.jsx)(n.code,{children:"aggregate"})," with ",(0,t.jsx)(n.code,{children:"filter"})]})}),"\n",(0,t.jsxs)(n.p,{children:["Since ",(0,t.jsx)(n.code,{children:"filter"})," extracts specific fields, it can return a ",(0,t.jsx)(n.strong,{children:"list of numeric values"}),". This list can then be passed directly into ",(0,t.jsx)(n.code,{children:"aggregate"})," for calculations."]}),"\n",(0,t.jsx)(n.h3,{id:"example-sum-of-all-prices",children:(0,t.jsx)(n.strong,{children:"Example: Sum of All Prices"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$filteredPrices = $sdb->filter($data, [\"price\"]);\r\n$totalPrice = $sdb->aggregate($filteredPrices, 'SUM');\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filter"})," extracts only the ",(0,t.jsx)(n.code,{children:'"price"'})," column."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"aggregate"})," calculates the total sum."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example-finding-the-highest-score",children:(0,t.jsx)(n.strong,{children:"Example: Finding the Highest Score"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$scores = $sdb->filter($data, [\"score\"]);\r\n$maxScore = $sdb->aggregate($scores, 'MAX');\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filter"})," retrieves all scores."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"aggregate"})," finds the highest score."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example-calculating-the-average-age",children:(0,t.jsx)(n.strong,{children:"Example: Calculating the Average Age"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$ages = $sdb->filter($data, [\"age\"]);\r\n$averageAge = $sdb->aggregate($ages, 'AVG');\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filter"})," extracts all ages."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"aggregate"})," computes the average."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"why-use-aggregate-with-filter",children:(0,t.jsxs)(n.strong,{children:["Why Use ",(0,t.jsx)(n.code,{children:"aggregate"})," with ",(0,t.jsx)(n.code,{children:"filter"}),"?"]})}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Dynamic calculations"})," \u2013 Works with extracted data without needing manual processing.",(0,t.jsx)(n.br,{}),"\n","\u2705 ",(0,t.jsx)(n.strong,{children:"Efficient"})," \u2013 Processes only relevant values instead of looping through full datasets.",(0,t.jsx)(n.br,{}),"\n","\u2705 ",(0,t.jsx)(n.strong,{children:"Readable Code"})," \u2013 Makes operations like sum, min, and average easy to implement."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:(0,t.jsx)(n.strong,{children:"Conclusion"})}),"\n",(0,t.jsxs)(n.p,{children:["The combination of ",(0,t.jsx)(n.code,{children:"filter"})," and ",(0,t.jsx)(n.code,{children:"aggregate"})," provides a ",(0,t.jsx)(n.strong,{children:"powerful way to process numerical data"})," in SwartzDB. First, ",(0,t.jsx)(n.strong,{children:"filter extracts"})," a specific column, then ",(0,t.jsx)(n.strong,{children:"aggregate performs"})," calculations on the result."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);