"use strict";(self.webpackChunkswartzdb_docs=self.webpackChunkswartzdb_docs||[]).push([[349],{1093:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"utility/idgen","title":"IDgen Function","description":"The idgen function is a simple and efficient way to generate random IDs, making it useful for creating unique object IDs for each row in a database.","source":"@site/docs/utility/idgen.md","sourceDirName":"utility","slug":"/utility/idgen","permalink":"/docs/utility/idgen","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Decall Function","permalink":"/docs/utility/decall"}}');var i=s(4848),t=s(8453);const o={sidebar_position:4},d="IDgen Function",c={},a=[{value:"<strong>How <code>idgen</code> Works</strong>",id:"how-idgen-works",level:2},{value:"<strong>Example Usage</strong>",id:"example-usage",level:2},{value:"<strong>Generate a 10-character ID</strong>",id:"generate-a-10-character-id",level:3},{value:"<strong>Custom Length (15 Characters)</strong>",id:"custom-length-15-characters",level:3},{value:"<strong>Adding a Delimiter (&quot;-&quot;)</strong>",id:"adding-a-delimiter--",level:3},{value:"<strong>Why Use <code>idgen</code>?</strong>",id:"why-use-idgen",level:2},{value:"<strong>Conclusion</strong>",id:"conclusion",level:2}];function l(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"idgen-function",children:"IDgen Function"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"idgen"})," function is a ",(0,i.jsx)(n.strong,{children:"simple and efficient way to generate random IDs"}),", making it useful for ",(0,i.jsx)(n.strong,{children:"creating unique object IDs for each row"})," in a database."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"how-idgen-works",children:(0,i.jsxs)(n.strong,{children:["How ",(0,i.jsx)(n.code,{children:"idgen"})," Works"]})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 Generates a ",(0,i.jsx)(n.strong,{children:"random alphanumeric string"})," of a specified length.",(0,i.jsx)(n.br,{}),"\n","\ud83d\udd39 Uses a mix of ",(0,i.jsx)(n.strong,{children:"uppercase letters, lowercase letters, and numbers"}),".",(0,i.jsx)(n.br,{}),"\n","\ud83d\udd39 Allows an ",(0,i.jsx)(n.strong,{children:"optional delimiter"})," (",(0,i.jsx)(n.code,{children:"$delim"}),") to be added between characters."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"example-usage",children:(0,i.jsx)(n.strong,{children:"Example Usage"})}),"\n",(0,i.jsx)(n.h3,{id:"generate-a-10-character-id",children:(0,i.jsx)(n.strong,{children:"Generate a 10-character ID"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$id = $sdb->idgen();\r\necho $id;  \n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 Output: ",(0,i.jsx)(n.code,{children:"aB3xT9wY2Q"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"custom-length-15-characters",children:(0,i.jsx)(n.strong,{children:"Custom Length (15 Characters)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$id = $sdb->idgen(15);\r\necho $id;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 Output: ",(0,i.jsx)(n.code,{children:"Xy7aT9kW3BzQmN"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"adding-a-delimiter--",children:(0,i.jsx)(n.strong,{children:'Adding a Delimiter ("-")'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'$id = $sdb->idgen(8, "-");\r\necho $id;\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd39 Output: ",(0,i.jsx)(n.code,{children:"A-3-K-7-T-W-9-Q-"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"why-use-idgen",children:(0,i.jsxs)(n.strong,{children:["Why Use ",(0,i.jsx)(n.code,{children:"idgen"}),"?"]})}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Quick & Easy:"})," No need to manually generate IDs.",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Unique & Random:"})," Reduces the chances of collisions.",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Flexible:"})," Supports different lengths and custom delimiters.",(0,i.jsx)(n.br,{}),"\n","\u2705 ",(0,i.jsx)(n.strong,{children:"Perfect for Object IDs:"})," Assign unique IDs to database rows, API keys, or user sessions."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:(0,i.jsx)(n.strong,{children:"Conclusion"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"idgen"})," function is an ",(0,i.jsx)(n.strong,{children:"efficient solution for generating random IDs"}),". Whether you need ",(0,i.jsx)(n.strong,{children:"unique identifiers for rows, objects, or tokens"}),", ",(0,i.jsx)(n.code,{children:"idgen"})," makes the process ",(0,i.jsx)(n.strong,{children:"fast and customizable"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var r=s(6540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);