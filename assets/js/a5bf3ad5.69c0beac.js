"use strict";(self.webpackChunkswartzdb_docs=self.webpackChunkswartzdb_docs||[]).push([[132],{5877:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"data-manipulation/filter","title":"Filter Function","description":"The filter function in SwartzDB allows selecting, transforming, and formatting specific fields from a dataset while applying operations like concatenation, case conversion, and arithmetic calculations.","source":"@site/docs/data-manipulation/filter.md","sourceDirName":"data-manipulation","slug":"/data-manipulation/filter","permalink":"/docs/data-manipulation/filter","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Data Manipulation Functions","permalink":"/docs/category/data-manipulation-functions"},"next":{"title":"Aggregate Function","permalink":"/docs/data-manipulation/aggregate"}}');var i=s(4848),t=s(8453);const c={sidebar_position:1},a="Filter Function",l={},o=[{value:"<strong>How <code>filter</code> Works</strong>",id:"how-filter-works",level:2},{value:"<strong>Basic Field Selection</strong>",id:"basic-field-selection",level:3},{value:"<strong>Applying Operations</strong>",id:"applying-operations",level:2},{value:"<strong>Concatenation (<code>concat</code>)</strong>",id:"concatenation-concat",level:3},{value:"<strong>Changing Case (<code>uppercase</code>, <code>lowercase</code>)</strong>",id:"changing-case-uppercase-lowercase",level:3},{value:"<strong>Performing Arithmetic (<code>sum</code>, <code>difference</code>)</strong>",id:"performing-arithmetic-sum-difference",level:3},{value:"<strong>Formatting Dates (<code>date_format</code>)</strong>",id:"formatting-dates-date_format",level:3},{value:"<strong>Understanding Static Values (<code>s::</code>)</strong>",id:"understanding-static-values-s",level:2},{value:"<strong>Example:</strong>",id:"example",level:3},{value:"<strong>Example with Numbers</strong>",id:"example-with-numbers",level:3},{value:"<strong>When to Use Filtering?</strong>",id:"when-to-use-filtering",level:2},{value:"<strong>Conclusion</strong>",id:"conclusion",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"filter-function",children:"Filter Function"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"filter"})," function in SwartzDB allows ",(0,i.jsx)(n.strong,{children:"selecting, transforming, and formatting"})," specific fields from a dataset while applying ",(0,i.jsx)(n.strong,{children:"operations"})," like concatenation, case conversion, and arithmetic calculations."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"how-filter-works",children:(0,i.jsxs)(n.strong,{children:["How ",(0,i.jsx)(n.code,{children:"filter"})," Works"]})}),"\n",(0,i.jsx)(n.h3,{id:"basic-field-selection",children:(0,i.jsx)(n.strong,{children:"Basic Field Selection"})}),"\n",(0,i.jsx)(n.p,{children:"You can extract specific fields from an array:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'$filteredData = $sdb->filter($data, ["name", "age"]);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This returns an array containing only the ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"age"})," columns."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"applying-operations",children:(0,i.jsx)(n.strong,{children:"Applying Operations"})}),"\n",(0,i.jsx)(n.h3,{id:"concatenation-concat",children:(0,i.jsxs)(n.strong,{children:["Concatenation (",(0,i.jsx)(n.code,{children:"concat"}),")"]})}),"\n",(0,i.jsx)(n.p,{children:"You can merge multiple columns into one:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'$filteredData = $sdb->filter($data, [\r\n    "full_name" => ["concat" => ["first_name", "s:: ", "last_name"]]\r\n]);\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This merges ",(0,i.jsx)(n.code,{children:"first_name"})," and ",(0,i.jsx)(n.code,{children:"last_name"})," with a space in between."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"s:: "'})," is a ",(0,i.jsx)(n.strong,{children:"static value"}),", meaning it's ",(0,i.jsx)(n.strong,{children:"not a column"})," but a ",(0,i.jsx)(n.strong,{children:"fixed space character"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"changing-case-uppercase-lowercase",children:(0,i.jsxs)(n.strong,{children:["Changing Case (",(0,i.jsx)(n.code,{children:"uppercase"}),", ",(0,i.jsx)(n.code,{children:"lowercase"}),")"]})}),"\n",(0,i.jsx)(n.p,{children:"You can convert text to uppercase or lowercase:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'$filteredData = $sdb->filter($data, [\r\n    "upper_name" => ["uppercase" => "name"],\r\n    "lower_email" => ["lowercase" => "email"]\r\n]);\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"uppercase" => "name"'})," changes ",(0,i.jsx)(n.code,{children:"name"})," to uppercase."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"lowercase" => "email"'})," changes ",(0,i.jsx)(n.code,{children:"email"})," to lowercase."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"performing-arithmetic-sum-difference",children:(0,i.jsxs)(n.strong,{children:["Performing Arithmetic (",(0,i.jsx)(n.code,{children:"sum"}),", ",(0,i.jsx)(n.code,{children:"difference"}),")"]})}),"\n",(0,i.jsx)(n.p,{children:"You can perform calculations on numerical columns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'$filteredData = $sdb->filter($data, [\r\n    "total_price" => ["sum" => ["price", "tax"]],\r\n    "profit" => ["difference" => ["revenue", "cost"]]\r\n]);\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"sum" => ["price", "tax"]'})," adds ",(0,i.jsx)(n.code,{children:"price"})," and ",(0,i.jsx)(n.code,{children:"tax"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"difference" => ["revenue", "cost"]'})," subtracts ",(0,i.jsx)(n.code,{children:"cost"})," from ",(0,i.jsx)(n.code,{children:"revenue"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"formatting-dates-date_format",children:(0,i.jsxs)(n.strong,{children:["Formatting Dates (",(0,i.jsx)(n.code,{children:"date_format"}),")"]})}),"\n",(0,i.jsx)(n.p,{children:"You can convert dates into a different format:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'$filteredData = $sdb->filter($data, [\r\n    "formatted_date" => ["date_format" => ["date_column", "d M Y"]]\r\n]);\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"date_format" => ["date_column", "d M Y"]'})," converts ",(0,i.jsx)(n.code,{children:"date_column"})," into ",(0,i.jsx)(n.code,{children:'"05 Mar 2024"'})," format."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"understanding-static-values-s",children:(0,i.jsxs)(n.strong,{children:["Understanding Static Values (",(0,i.jsx)(n.code,{children:"s::"}),")"]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Any argument in ",(0,i.jsx)(n.code,{children:"filter"})," is treated as a column or an operation unless it starts with ",(0,i.jsx)(n.code,{children:"s::"}),"."]}),(0,i.jsx)(n.br,{}),"\n","If an argument starts with ",(0,i.jsx)(n.code,{children:'"s::"'}),", it is a ",(0,i.jsx)(n.strong,{children:"static value"})," (a fixed value, not a column name)."]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'$filteredData = $sdb->filter($data, [\r\n    "greeting" => ["concat" => ["s::Hello, ", "name"]]\r\n]);\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"s::Hello, "'})," is a ",(0,i.jsx)(n.strong,{children:"static string"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"name"'})," is a ",(0,i.jsx)(n.strong,{children:"column"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-with-numbers",children:(0,i.jsx)(n.strong,{children:"Example with Numbers"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'$filteredData = $sdb->filter($data, [\r\n    "taxed_price" => ["sum" => ["price", "s::5"]]\r\n]);\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"price"'})," is a ",(0,i.jsx)(n.strong,{children:"column"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"s::5"'})," is a ",(0,i.jsx)(n.strong,{children:"fixed value"})," (adding 5 to the price)."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-filtering",children:(0,i.jsx)(n.strong,{children:"When to Use Filtering?"})}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsxs)(n.strong,{children:["Use ",(0,i.jsx)(n.code,{children:"filter"})," when:"]})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["You need to extract ",(0,i.jsx)(n.strong,{children:"specific columns"})," from a dataset."]}),"\n",(0,i.jsxs)(n.li,{children:["You want to ",(0,i.jsx)(n.strong,{children:"format"})," or ",(0,i.jsx)(n.strong,{children:"transform"})," values before use."]}),"\n",(0,i.jsxs)(n.li,{children:["You need ",(0,i.jsx)(n.strong,{children:"computed fields"})," (concatenations, calculations, case changes)."]}),"\n",(0,i.jsxs)(n.li,{children:["You need to ",(0,i.jsx)(n.strong,{children:"format dates consistently"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u274c ",(0,i.jsxs)(n.strong,{children:["Do NOT use ",(0,i.jsx)(n.code,{children:"filter"})," when:"]})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["You need to delete rows (use ",(0,i.jsx)(n.code,{children:"remove_row"})," instead)."]}),"\n",(0,i.jsxs)(n.li,{children:["You want to update records (use ",(0,i.jsx)(n.code,{children:"update_row"})," instead)."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:(0,i.jsx)(n.strong,{children:"Conclusion"})}),"\n",(0,i.jsxs)(n.p,{children:["Filtering in SwartzDB is ",(0,i.jsx)(n.strong,{children:"powerful and flexible"}),", allowing you to extract, modify, and compute data dynamically. ",(0,i.jsxs)(n.strong,{children:["Static values (",(0,i.jsx)(n.code,{children:"s::"}),")"]})," help ",(0,i.jsx)(n.strong,{children:"mix constants with column data"}),", making operations more versatile."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var r=s(6540);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);